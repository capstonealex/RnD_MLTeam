
[time1, motorangle, tor, time 2,  fksmfse,rlkgms;gk . ]
time, ForcePlateReadings_1, ForcePlateReadings_2, ForcePlateReadings_3, ForcePlateReadings_4, ForcePlateReadings_5, ForcePlateReadings_6, ForcePlateReadings_7, ForcePlateReadings_8, ForcePlateReadings_9, ForcePlateReadings_10, ForcePlateReadings_11, ForcePlateReadings_12, ForcePlateReadings_13, ForcePlateReadings_14, ForcePlateReadings_15, ForcePlateReadings_16, MotorPositions_1, MotorPositions_2, MotorPositions_3, MotorPositions_4, MotorVelocities_1, MotorVelocities_2, MotorVelocities_3, MotorVelocities_4, MotorTorques_1, MotorTorques_2, MotorTorques_3, MotorTorques_4, GoButton, CurrentState, CurrentMovement



#code

1. Simulation on a file:   testing.csv

2. func spit datastream:   simulate live exo output

3. func collateData:       history of the live data stream (per sample rate)
                        create the input that the ml model recognises
                        i.e. [int1 t1, int2 t1 ..., int1 t2, int2 t2 ...etc] 

4. func modelDecision:     input data into model 
                        spits out result

5. func evalResult:        eval against actual intent per test.csv
                        we do mad metric stats


Extra Thoughts

Datastream:
    [ 200 readings queue ] 
    - hit stationary state spit out put
    - update every 5 seconds
    - flash UI every new intent update

ML Model sequence & Timing
    MOVING      ->    moment hit STATIONARY   ->  5secs               while still in stationary state
    data queue        spit model result           collecting data     refresh: spit output again


